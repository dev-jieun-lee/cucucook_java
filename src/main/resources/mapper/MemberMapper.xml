<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.cucucook.mapper.MemberMapper">

<resultMap id="MemberResultMap" type="Member">
    <result property="memberId" column="member_id"/>
    <result property="userId" column="user_id"/>
    <result property="name" column="name"/>
    <result property="phone" column="phone"/>
    <result property="password" column="password"/>
    <result property="role" column="role"/>
    <result property="email" column="email"/>
    <result property="smsNoti" column="sms_noti"/>
    <result property="emailNoti" column="email_noti"/>
</resultMap>

    <!-- 사용자 아이디를 기준으로 사용자를 조회 -->
    <select id="findByUserId" parameterType="String" resultType="com.example.cucucook.domain.Member">
        SELECT member_id, user_id, name, phone, password, role, email, sms_noti, email_noti, failed_attempts
        FROM member
        WHERE user_id = #{userId}
    </select>

    <!-- 사용자 핸드폰번호를 기준으로 사용자를 조회 -->
    <select id="findByPhone" parameterType="String" resultType="com.example.cucucook.domain.Member">
        SELECT member_id, user_id, name, phone, password, role, email, sms_noti, email_noti
        FROM member
        WHERE phone = #{phone}
    </select>

    <!-- 회원 수 조회 -->
    <select id="getMemberCount" parameterType="String" resultType="int">
        SELECT COUNT(*)
        FROM member
        WHERE name LIKE CONCAT('%', #{search}, '%')
    </select>

    <!-- 회원 목록 조회 -->
    <select id="getMemberList" resultMap="MemberResultMap">
    SELECT member_id, user_id, name, phone, password, role, email, sms_noti, email_noti
    FROM member
    <where>
        <if test="search != null and search.trim() != ''">
            <choose>
                <when test="searchType == 'name'">
                    AND name LIKE CONCAT('%', #{search}, '%')
                </when>
                <when test="searchType == 'userId'">
                    AND user_id LIKE CONCAT('%', #{search}, '%')
                </when>
                <when test="searchType == 'all'">
                    AND (name LIKE CONCAT('%', #{search}, '%') OR user_id LIKE CONCAT('%', #{search}, '%'))
                </when>
            </choose>
        </if>
    </where>
    ORDER BY member_id DESC
    </select>


    <!-- 회원 보기 -->
    <select id="getMember" parameterType="int" resultType="com.example.cucucook.domain.Member">
        SELECT member_id, user_id, name, phone, password, role, email, sms_noti, email_noti
        FROM member
        WHERE member_id = #{memberId}
    </select>

    <!-- 회원 등록 -->
    <insert id="insertMember" useGeneratedKeys="true" keyProperty="memberId" keyColumn="member_id">
        INSERT INTO member (user_id, password, name, phone, role, email, sms_noti, email_noti)
        VALUES (#{userId}, #{password}, #{name}, #{phone}, '1', #{email}, false, false)
    </insert>

    <!-- 회원 정보 업데이트 쿼리 -->
    <update id="updateMemberInfo" parameterType="Member">
        UPDATE member
        SET name = #{name},
            phone = #{phone},
            email = #{email},
            sms_noti = #{smsNoti},
            email_noti = #{emailNoti}
        WHERE member_id = #{memberId}
    </update>

    <!-- 비밀번호 변경 쿼리 -->
    <update id="changePasswordByUser">
        UPDATE member
        SET password = #{newPassword}
        WHERE member_id = #{memberId}
    </update>

    <!-- 회원 삭제 -->
    <delete id="deleteMember">
        DELETE FROM member
        WHERE member_id = #{memberId}
    </delete>

    <!-- 아이디 중복 체크 -->
    <select id="existsByUserId" parameterType="String" resultType="boolean">
        SELECT CASE WHEN COUNT(*) > 0 THEN true ELSE false END
        FROM member
        WHERE user_id = #{userId}
    </select>

    <!-- 이메일 중복 체크 -->
    <select id="existsByEmail" parameterType="String" resultType="boolean">
        SELECT CASE WHEN COUNT(*) > 0 THEN true ELSE false END
        FROM member
        WHERE email = #{email}
    </select>

    <!-- 아이디 찾기 -->
    <select id="findId" parameterType="com.example.cucucook.domain.Member" resultType="com.example.cucucook.domain.Member">
        SELECT user_id AS userId
        FROM member
        WHERE name = #{name} AND email = #{email}
    </select>

    <!-- 비밀번호 찾기 -->
    <select id="findMemberByIdNameAndEmail" parameterType="com.example.cucucook.domain.Member" resultType="com.example.cucucook.domain.Member">
        SELECT * FROM member
        WHERE user_id = #{userId} AND name = #{name} AND email = #{email}
    </select>

    <!-- 비밀번호 업데이트 -->
    <update id="updatePassword" parameterType="com.example.cucucook.domain.Member">
        UPDATE member
        SET password = #{password}
        WHERE user_id = #{userId}
          AND name = #{name}
          AND phone = #{phone}
    </update>

    <!-- 이메일과 코드로 인증 코드 찾기 -->
    <select id="findByEmailAndCode" parameterType="map" resultType="com.example.cucucook.domain.VerificationCode">
        SELECT * FROM verification_code
        WHERE email = #{email} AND code = #{code}
    </select>

    <!-- 이메일로 인증 코드 찾기 -->
    <select id="findVerificationCodeByEmail" parameterType="String" resultType="com.example.cucucook.domain.VerificationCode">
        SELECT * FROM verification_code
        WHERE email = #{email}
    </select>

    <!-- 기존 인증 코드 업데이트 -->
    <update id="updateVerificationCode" parameterType="com.example.cucucook.domain.VerificationCode">
        UPDATE verification_code
        SET code = #{code},
            created_at = #{createdAt},
            expires_at = #{expiresAt}
        WHERE email = #{email}
    </update>

    <!-- 새로운 인증 코드 저장 -->
    <insert id="saveVerificationCode" parameterType="com.example.cucucook.domain.VerificationCode">
        INSERT INTO verification_code (email, code, created_at, expires_at)
        VALUES (#{email}, #{code}, #{createdAt}, #{expiresAt})
    </insert>

    <!-- 실패 횟수 업데이트 -->
<update id="updateFailedAttempts" parameterType="map">
    UPDATE member
    SET failed_attempts = #{failedAttempts}
    WHERE user_id = #{userId}
</update>

    <!-- 실패 횟수 초기화 -->
    <update id="resetFailedAttempts" parameterType="String">
        UPDATE member
        SET failed_attempts = 0, lockout_time =null
        WHERE user_id = #{userId}
    </update>

    <!-- 계정 잠금 -->
    <update id="lockAccount" parameterType="map">
        UPDATE member
        SET lockout_time = #{lockoutTime}
        WHERE user_id = #{userId}
    </update>

        <!-- 회원 조회-->
<select id="getFailedAttempts" parameterType="string" resultType="int">
    SELECT failedAttempts
    FROM members
    WHERE userId = #{userId}
</select>
</mapper>